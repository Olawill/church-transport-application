// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PLATFORM_ADMIN
  PLATFORM_USER
  ADMIN
  TRANSPORTATION_TEAM
  USER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
  BANNED
}

enum ServiceType {
  REGULAR
  SPECIAL
}

enum RequestStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
  TRIAL
  FREE_FOR_LIFE
}

enum BillingPlan {
  STARTER    // Basic plan
  PROFESSIONAL // Mid-tier plan
  ENTERPRISE // Full-featured plan
  CUSTOM     // Custom enterprise plan
}

enum BillingInterval {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum OrganizationType {
  CHURCH
  NONPROFIT
  CORPORATE
  EDUCATIONAL
  GOVERNMENT
  OTHER
}

enum RouteStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum OTPType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  LOGIN_VERIFICATION
  PASSWORD_RESET
}

enum AuthMethod {
  EMAIL_PASSWORD
  GOOGLE_OAUTH
  FACEBOOK_OAUTH
  PHONE_OTP
}

enum SecretType {
  GOOGLE_MAPS_API_KEY
  GOOGLE_OAUTH_CLIENT_ID
  GOOGLE_OAUTH_CLIENT_SECRET
  FACEBOOK_APP_ID
  FACEBOOK_APP_SECRET
  WHATSAPP_PHONE_NUMBER_ID
  WHATSAPP_ACCESS_TOKEN
  CUSTOM
}

// Platform-level secrets (Stripe, SMS, etc.)
enum PlatformSecretType {
  STRIPE_PUBLIC_KEY
  STRIPE_SECRET_KEY
  STRIPE_WEBHOOK_SECRET
  SMS_PROVIDER_KEY
  SMS_PROVIDER_SECRET
  EMAIL_PROVIDER_KEY
  EMAIL_PROVIDER_SECRET
  WHATSAPP_VERIFY_TOKEN
  CUSTOM
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  organizationId   String?     // Platform admins and users don't belong to an org
  firstName     String
  lastName      String
  email         String      @unique
  password      String? // Optional for OAuth
  phone         String?
  username      String?     @unique
  role          UserRole    @default(USER)
  status        UserStatus  @default(PENDING)
  isActive      Boolean     @default(true)
  maxDistance   Int         @default(10) // For transportation team members
  emailVerified DateTime?
  phoneVerified DateTime?
  image         String?
  whatsappNumber String?
  twoFactorEnabled Boolean   @default(false)
  bannedAt      DateTime?
  bannedBy      String?
  banReason     String?
  isOAuthSignup    Boolean     @default(false)
  lastLoginAt      DateTime?
  currentLocation  String?     // JSON for latitude/longitude
  fcmToken         String?     // For push notifications

  // Platform role additions
  isOrgOwner           Boolean     @default(false)
  isSuperUser          Boolean     @default(false)
  permissions          String?     // JSON array of specific permissions
  
  // Phone authentication
  phoneCountryCode     String?     @default("+1")
  preferredOtpChannel  String?     @default("SMS") // SMS, WHATSAPP, EMAIL
  
  // Enhanced 2FA
  twoFactorSecret      String?     // TOTP secret
  backupCodes          String?     // JSON array of backup codes
  
  // Login tracking
  lastLoginMethod      String?     // Which auth method was used
  loginAttempts        Int         @default(0)
  lockedUntil          DateTime?
  
  // Onboarding
  onboardingCompleted  Boolean     @default(false)
  welcomeEmailSent     Boolean     @default(false)

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  accounts        Account[]
  sessions        Session[]
  addresses       Address[]
  pickupRequests  PickupRequest[] @relation("UserRequests")
  acceptedRequests PickupRequest[] @relation("DriverRequests")
  cancelledRequests DriverRequestCancel[] @relation("DriverRequestsCancel")
  otps            OTP[]
  routes           Route[]
  reportGenerated  Report[] @relation("ReportCreator")
  managedOrgs      Organization[] @relation("OrgOwner")

  @@index([organizationId])
  @@index([email])
  @@index([role])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id         String  @id @default(cuid())
  organizationId String
  userId     String
  name       String  // e.g., "Home", "Work", "Other"
  street     String
  city       String
  province   String
  postalCode String
  country    String  @default("Canada")
  latitude   Float?
  longitude  Float?
  isDefault  Boolean @default(false)
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickupRequests PickupRequest[]

  @@unique([userId, name]) // Prevent duplicate address names per user
  @@index([organizationId])
  @@map("addresses")
}

model ServiceDay {
  id          String      @id @default(cuid())
  organizationId String
  name        String
  dayOfWeek   Int         // 0 = Sunday, 1 = Monday, etc.
  time        String      // Format: "HH:MM" (24-hour)
  serviceType ServiceType @default(REGULAR)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  pickupRequests PickupRequest[]

  @@index([organizationId])
  @@map("service_days")
}

model PickupRequest {
  id          String        @id @default(cuid())
  organizationId String
  userId      String
  driverId    String?
  serviceDayId String
  addressId   String
  routeId        String?       // For route optimization
  requestDate DateTime      // The date of the service
  status      RequestStatus @default(PENDING)
  notes       String?
  distance    Float?        // Distance from driver to pickup location
  estimatedTime  Int?          // Estimated pickup time in minutes
  actualPickupTime DateTime?   // Actual pickup time
  priority       Int           @default(0) // Higher priority = picked up first
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user       User        @relation("UserRequests", fields: [userId], references: [id])
  driver     User?       @relation("DriverRequests", fields: [driverId], references: [id])
  serviceDay ServiceDay  @relation(fields: [serviceDayId], references: [id])
  address    Address     @relation(fields: [addressId], references: [id])
  route        Route?       @relation(fields: [routeId], references: [id])

  cancelledRequests DriverRequestCancel[]

  @@index([organizationId])
  @@index([status, requestDate])
  @@index([driverId])
  @@map("pickup_requests")
}

model DriverRequestCancel {
  id          String        @id @default(cuid())
  organizationId String
  driverId    String
  requestId String
  note       String
  createdAt   DateTime      @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  driver     User       @relation("DriverRequestsCancel", fields: [driverId], references: [id])
  request PickupRequest  @relation(fields: [requestId], references: [id])

  @@index([organizationId])
  @@map("driver_requests_cancel")
}

model SystemConfig {
  id    String @id @default(cuid())
  organizationId String? // NULL for platform-wide configs
  key   String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, key])
  @@index([organizationId])
  @@map("system_config")
}

model OTP {
  id        String   @id @default(cuid())
  organizationId String?
  userId    String
  code      String
  type      OTPType
  identifier String  // email or phone
  expiresAt DateTime
  verified  Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([organizationId])
  @@map("otps")
}
model Analytics {
  id          String   @id @default(cuid())
  organizationId String?  // NULL for platform-wide analytics
  eventType   String   // e.g., "pickup_request", "user_registration", "driver_acceptance"
  userId      String?
  metadata    String?  // JSON data for additional context
  value       Float?   // Numerical value if applicable
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([eventType, date])
  @@index([userId, eventType])
  @@index([organizationId])
  @@map("analytics")
}

model Notification {
  id          String   @id @default(cuid())
  organizationId String
  userId      String
  channel        NotificationChannel @default(EMAIL)
  title       String
  message     String
  status      String   @default("pending") // "pending", "sent", "failed"
  scheduledFor DateTime?
  sentAt      DateTime?
  metadata    String?  // JSON for additional notification data
  createdAt   DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([scheduledFor])
  @@index([organizationId])
  @@map("notifications")
}

// ============================================================================
// MULTI-TENANT ORGANIZATION MODELS
// ============================================================================

model Organization {
  id                    String           @id @default(cuid())
  name                  String
  slug                  String           @unique // for subdomain routing
  type                  OrganizationType @default(CHURCH)
  typeDescription       String?
  description           String?
  website               String?
  logo                  String?
  primaryColor          String?          @default("#3B82F6")
  secondaryColor        String?          @default("#1E40AF")
  
  // Contact Information
  contactEmail          String
  contactPhone          String?
  
  // Address Information
  street                String?
  city                  String?
  province              String?
  postalCode            String?
  country               String           @default("Canada")
  
  // Settings
  // timezone              String           @default("America/Toronto")
  // currency              String           @default("CAD")

  // Status and Management
  isActive              Boolean          @default(true)
  isSuspended           Boolean          @default(false)
  suspensionReason      String?
  suspendedAt           DateTime?
  suspendedBy           String?          // User ID who suspended
  isOnboarded           Boolean          @default(false)
  onboardingStep        Int              @default(0) // Track onboarding progress
  
  // Platform Settings
  enabledAuthMethods    String           @default("EMAIL_PASSWORD") // JSON array of AuthMethod
  allowUserRegistration Boolean          @default(true)
  requireEmailVerification Boolean       @default(true)
  requirePhoneVerification Boolean       @default(false)

  // Features enabled
  enableWhatsApp        Boolean          @default(true)
  enableSMS             Boolean          @default(false)
  enableEmail           Boolean          @default(true)
  enableRouteOptimization Boolean        @default(false)
  enableAdvancedReports Boolean          @default(false)
  enableMobileApp       Boolean          @default(false)
  enableCustomBranding  Boolean          @default(false)
  enableWhiteLabel      Boolean          @default(false)
  enableAPI             Boolean          @default(false)
  

  // Free for life status
  isFreeForLife         Boolean          @default(false)
  freeForLifeGrantedBy  String?          // Platform admin who granted it
  freeForLifeGrantedAt  DateTime?
  freeForLifeReason     String?
  
  // Timestamps
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  // Relations
  owner                 User             @relation("OrgOwner", fields: [ownerId], references: [id])
  ownerId               String
  users                 User[]
  subscription          Subscription?
  countries             OrganizationCountry[]
  addresses             Address[]
  serviceDays           ServiceDay[]
  pickupRequests        PickupRequest[]
  driverCancelledRequests        DriverRequestCancel[]
  systemConfigs         SystemConfig[]
  organizationSecrets   OrganizationSecret[]
  otps                  OTP[]
  analytics             Analytics[]
  notifications         Notification[]
  routes                Route[]
  invoices              Invoice[]
  reports               Report[]

  @@index([slug])
  @@index([isActive])
  @@index([ownerId])
  @@map("organizations")
}

model OrganizationSecret {
  id             String     @id @default(cuid())
  organizationId String
  secretType     SecretType
  key            String     // Custom key for CUSTOM type
  value          String     // Encrypted value
  description    String?
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      String     // User ID who created this secret

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, secretType, key])
  @@index([organizationId])
  @@map("organization_secrets")
}

model OrganizationCountry {
  id             String @id @default(cuid())
  organizationId String
  countryCode    String // ISO 3166-1 alpha-2 (e.g., "CA", "US")
  countryName    String
  isActive       Boolean @default(true)
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, countryCode])
  @@index([organizationId])
  @@map("organization_countries")
}

// Organization registration requests (for platform signup)
model OrganizationRegistration {
  id                String   @id @default(cuid())
  
  // Organization details
  organizationName  String
  slug              String   @unique
  type              OrganizationType
  description       String?
  contactEmail      String
  contactPhone      String?
  website           String?
  
  // Owner details
  ownerFirstName    String
  ownerLastName     String
  ownerEmail        String
  ownerPhone        String?
  
  // Registration details
  selectedPlan      BillingPlan @default(STARTER)
  selectedCountries String      // JSON array of country codes
  referralSource    String?
  
  // Status
  status            String      @default("PENDING") // PENDING, APPROVED, REJECTED
  rejectionReason   String?
  
  // Processing
  processedAt       DateTime?
  processedBy       String?     // Platform admin who processed
  organizationId    String?     // Created organization ID if approved
  
  // Metadata
  ipAddress         String?
  userAgent         String?
  utmSource         String?
  utmMedium         String?
  utmCampaign       String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([status])
  @@index([ownerEmail])
  @@map("organization_registrations")
}

// Platform configuration
model PlatformConfig {
  id                      String   @id @default(cuid())
  key                     String   @unique
  value                   String
  description             String?
  category                String   @default("general") // general, billing, features, etc.
  isPublic                Boolean  @default(false) // Can be accessed by organizations
  updatedBy               String   // Platform admin who updated
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@index([category])
  @@map("platform_config")
}

// Platform-level secrets (Stripe, SMS providers, etc.)
model PlatformSecret {
  id           String              @id @default(cuid())
  secretType   PlatformSecretType
  key          String              // Custom key for CUSTOM type
  value        String              // Encrypted value
  description  String?
  isActive     Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  createdBy    String              // Platform admin who created this secret

  @@unique([secretType, key])
  @@map("platform_secrets")
}

// ============================================================================
// SUBSCRIPTION & BILLING MODELS
// ============================================================================

model SubscriptionInfo {
  id                    String             @id @default(cuid())
  plan                  BillingPlan
  description           String?     // Plan description
  price                 Decimal            @default(0)

  // Limits
  maxUsers           Int         @default(100)
  maxDrivers         Int         @default(10)
  maxMonthlyRequests Int         @default(1000)
  maxCountries       Int         @default(1)
  
  // Feature flags
  enableWhatsApp        Boolean @default(false)
  enableSMS             Boolean @default(false) // SMS is always add-on
  enableEmail           Boolean @default(true)
  enableRouteOptimization Boolean @default(false)
  enableAdvancedReports Boolean @default(false)
  enableCustomBranding  Boolean @default(false)
  enableWhiteLabel      Boolean @default(false)
  enableAPI             Boolean @default(false)
  
  // SMS Add-on pricing (if available for this plan)
  smsAddonAvailable  Boolean @default(false)
  smsAddonPrice      Decimal @default(0)
  smsCreditsIncluded Int     @default(0)
  smsOverageRate     Decimal @default(0.05) // Per SMS overage cost
  
  // Metadata
  isActive           Boolean @default(true)
  sortOrder          Int     @default(0) // For display ordering
  isPopular          Boolean @default(false)

  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  subscriptions Subscription[]

  @@map("subscription_info")
}

model Subscription {
  id                    String             @id @default(cuid())
  organizationId        String             @unique
  subscriptionInfoId    String
  plan                  BillingPlan        @default(STARTER)
  status                SubscriptionStatus @default(TRIAL)
  interval              BillingInterval    @default(MONTHLY)
  
  // Pricing
  basePrice             Decimal            @default(0) // Base price per month
  countryMultiplier     Decimal            @default(1) // Multiplier based on countries
  smsAddonPrice         Decimal            @default(0) // Additional SMS cost
  totalPrice            Decimal            @default(0) // Final calculated price

  // Current plan limits (copied from SubscriptionInfo)
  maxUsers              Int                @default(100)
  maxDrivers            Int                @default(10)
  maxMonthlyRequests    Int                @default(1000)
  maxCountries          Int                @default(1)
  
  // Usage tracking
  currentUsers          Int                @default(0)
  currentDrivers        Int                @default(0)
  monthlyRequests       Int                @default(0)
  totalCountries        Int                @default(0)

  // SMS Add-on
  hasSMSAddon           Boolean            @default(false)
  smsCreditsIncluded    Int                @default(0)
  smsCreditsUsed        Int                @default(0)
  
  // Billing periods
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  trialStart            DateTime?
  trialEnd              DateTime?
  cancelledAt           DateTime?
  cancelAtPeriodEnd     Boolean            @default(false)
  
  // Payment info
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  lastPaymentAt         DateTime?
  nextBillingDate       DateTime?
  
  metadata              String?            // JSON for additional subscription info
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscriptionInfo SubscriptionInfo @relation(fields: [subscriptionInfoId], references: [id], onDelete: Cascade)
  invoices     Invoice[]
  usageRecords UsageRecord[]

  @@map("subscriptions")
}

model Invoice {
  id                String        @id @default(cuid())
  organizationId    String
  subscriptionId    String?
  number            String        @unique // Invoice number
  status            PaymentStatus @default(PENDING)
  
  // Amounts
  subtotal          Decimal
  taxRate           Decimal       @default(0)
  taxAmount         Decimal       @default(0)
  total             Decimal
  amountPaid        Decimal       @default(0)
  
  // Billing period
  periodStart       DateTime
  periodEnd         DateTime
  
  // Payment details
  stripeInvoiceId   String?
  paidAt            DateTime?
  dueDate           DateTime
  
  // File storage
  pdfUrl            String?       // Generated PDF invoice
  
  metadata          String?       // JSON for line items and additional data
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  @@index([organizationId])
  @@index([status])
  @@map("invoices")
}

model UsageRecord {
  id             String   @id @default(cuid())
  organizationId String
  subscriptionId String
  metric         String   // "users", "drivers", "requests", etc.
  value          Int
  date           DateTime @default(now())
  createdAt      DateTime @default(now())

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, metric, date])
  @@map("usage_records")
}

// ============================================================================
// ROUTE OPTIMIZATION MODELS
// ============================================================================

model Route {
  id               String      @id @default(cuid())
  organizationId   String
  driverId         String
  serviceDayId     String
  routeDate        DateTime
  status           RouteStatus @default(PLANNED)
  
  // Route details
  startLocation    String      // JSON: {lat, lng, address}
  endLocation      String?     // JSON: {lat, lng, address} (usually same as start)
  totalDistance    Float       // Total distance in kilometers
  estimatedTime    Int         // Total estimated time in minutes
  actualStartTime  DateTime?
  actualEndTime    DateTime?
  
  // Optimization data
  optimizedOrder   String      // JSON array of pickup request IDs in order
  optimizationScore Float?     // Efficiency score (0-100)
  
  notes            String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  driver         User            @relation(fields: [driverId], references: [id])
  pickupRequests PickupRequest[]

  @@index([organizationId])
  @@index([driverId, routeDate])
  @@map("routes")
}

// ============================================================================
// REPORTING & EXPORT MODELS
// ============================================================================

model Report {
  id             String   @id @default(cuid())
  organizationId String
  creatorId      String
  name           String
  description    String?
  type           String   // "pickup_summary", "driver_performance", "usage_stats", etc.
  
  // Report configuration
  filters        String   // JSON configuration for filters
  dateRange      String   // JSON: {start, end}
  groupBy        String?  // Field to group results by
  
  // Export settings
  format         String   @default("pdf") // "pdf", "excel", "csv"
  status         String   @default("generating") // "generating", "ready", "failed"
  
  // File storage
  fileUrl        String?  // Generated report file URL
  fileSize       Int?     // File size in bytes
  
  // Metadata
  recordCount    Int?     // Number of records in report
  generatedAt    DateTime?
  expiresAt      DateTime? // When to delete the file
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User         @relation("ReportCreator", fields: [creatorId], references: [id])

  @@index([organizationId])
  @@index([status])
  @@map("reports")
}
